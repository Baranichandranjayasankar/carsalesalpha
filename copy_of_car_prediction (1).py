# -*- coding: utf-8 -*-
"""Copy of car prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e59qX_Tyb5EgpRPxnZvffUe7LrofSGyq
"""

cp = pd.read_csv('/content/car (2).zip')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # Imports the pandas library and assigns it to the alias pd
import numpy as np # Imports the numpy library and assigns it to the alias np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

from matplotlib import style

cp.head()

cp.tail()

cp.info()

cp.describe()

cp.isnull().sum()

cp.columns

cp.dropna()

print(cp['Fuel_Type'].value_counts())

print(cp['Selling_type'].value_counts())
print(cp['Transmission'].value_counts())

fueltype = cp['Fuel_Type']
sellingtype = cp['Selling_type']
sellingprice = cp['Selling_Price']
transmissiontype = cp['Transmission']

cp.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
cp.replace({'Selling_type':{'Dealer':0,'Individual':1}},inplace=True)
cp.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

cp.head()

x=cp.drop([ 'Car_Name' , 'Selling_Price'],axis=1)
y=cp['Selling_Price']

print(x)

print(y)

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.1,random_state=2)

lin_reg_model = LinearRegression()

lin_reg_model.fit(x_train,y_train)

training_data_prediction = lin_reg_model.predict(x_train)

error_score = metrics.r2_score(y_train,training_data_prediction)
print("R squared Error : ",error_score)

plt.scatter(y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

test_data_prediction = lin_reg_model.predict(x_test)

error_score_test = metrics.r2_score(y_test,test_data_prediction)
print("R squared Error : ",error_score_test)

plt.scatter(y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

lass_reg_model = Lasso()

lass_reg_model.fit(x_train,y_train)

training_data_prediction = lass_reg_model.predict(x_train)

error_score = metrics.r2_score(y_train,training_data_prediction)
print("R squared Error : ",error_score)

plt.scatter(y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()